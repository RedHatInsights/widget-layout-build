{"version":3,"file":"js/DefaultRoute.01f8f0de4ee796b90294.js","mappings":"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","sources":["webpack:///./src/state/drawerExpandedAtom.ts","webpack:///./src/Components/Widgets/LargeWidget.tsx","webpack:///./src/Components/Widgets/widgetTypes.ts","webpack:///./src/state/currentDropInItemAtom.ts","webpack:///./src/Components/Widgets/MediumWidget.tsx","webpack:///./src/Components/Widgets/SmallWidget.tsx","webpack:///./src/Components/WidgetDrawer/WidgetDrawer.tsx","webpack:///./src/Components/Widgets/widgetMapper.ts","webpack:///./src/Components/DnDLayout/GridTile.tsx","webpack:///./src/Components/Widgets/widgetDefaults.ts","webpack:///./src/state/layoutAtom.ts","webpack:///./src/state/templateAtom.ts","webpack:///./src/api/dashboard-templates.ts","webpack:///./src/hooks/useLoaded.ts","webpack:///./src/hooks/useCurrentUser.ts","webpack:///./src/Components/DnDLayout/GridLayout.tsx","webpack:///./src/state/lockedLayoutAtom.ts","webpack:///./src/Components/Header/Header.tsx","webpack:///./src/Routes/Default/Default.tsx"],"sourcesContent":["import { atom } from 'jotai';\n\nexport const drawerExpandedAtom = atom<boolean>(false);\n","import React from 'react';\n\nconst LargeWidget = ({ children }: React.PropsWithChildren<object>) => {\n  return <>{children}</>;\n};\n\nexport default LargeWidget;\n","export enum WidgetTypes {\n  LargeWidget = 'LargeWidget',\n  MediumWidget = 'MediumWidget',\n  SmallWidget = 'SmallWidget',\n}\n\nexport function isWidgetType(type: string): type is WidgetTypes {\n  return Object.values(WidgetTypes).includes(type as WidgetTypes);\n}\n","import { atom } from 'jotai';\nimport { WidgetTypes } from '../Components/Widgets/widgetTypes';\n\nexport const currentDropInItemAtom = atom<WidgetTypes | undefined>(undefined);\n","import React from 'react';\n\nconst MediumWidget = ({ children }: React.PropsWithChildren<object>) => {\n  return <>{children}</>;\n};\n\nexport default MediumWidget;\n","import React from 'react';\n\nconst SmallWidget = ({ children }: React.PropsWithChildren<object>) => {\n  return <>{children}</>;\n};\n\nexport default SmallWidget;\n","import {\n  Button,\n  Card,\n  CardHeader,\n  CardTitle,\n  Gallery,\n  GalleryItem,\n  Icon,\n  PageSection,\n  Split,\n  SplitItem,\n  Title,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { useAtom, useSetAtom } from 'jotai';\nimport React from 'react';\nimport { drawerExpandedAtom } from '../../state/drawerExpandedAtom';\nimport { CloseIcon, GripVerticalIcon } from '@patternfly/react-icons';\nimport LargeWidget from '../Widgets/LargeWidget';\nimport { WidgetTypes } from '../Widgets/widgetTypes';\nimport { currentDropInItemAtom } from '../../state/currentDropInItemAtom';\nimport MediumWidget from '../Widgets/MediumWidget';\nimport SmallWidget from '../Widgets/SmallWidget';\n\nexport type AddWidgetDrawerProps = React.PropsWithChildren<{\n  dismissible?: boolean;\n}>;\n\nconst WidgetWrapper = ({ title, widgetType }: React.PropsWithChildren<{ title: string; widgetType: WidgetTypes }>) => {\n  const setDropInItem = useSetAtom(currentDropInItemAtom);\n  const headerActions = (\n    <Tooltip content={<p>Move widget</p>}>\n      <Icon className=\"pf-v5-u-pt-md\">\n        <GripVerticalIcon style={{ fill: '#6a6e73' }} />\n      </Icon>\n    </Tooltip>\n  );\n  return (\n    <Card\n      onDragStart={(e) => {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        const nodeRect = e.target.getBoundingClientRect();\n        e.dataTransfer.setDragImage(\n          e.target as HTMLDivElement,\n          // mess with this to set the drag image and proper mouse position\n          e.clientX - nodeRect.left,\n          e.clientY - nodeRect.top\n        );\n        e.dataTransfer.setData('text', widgetType);\n        setDropInItem(widgetType);\n      }}\n      onDragEnd={() => setDropInItem(undefined)}\n      // eslint-disable-next-line react/no-unknown-property\n      unselectable=\"on\"\n      draggable={true}\n    >\n      <CardHeader className=\"pf-v5-u-py-md\" actions={{ actions: headerActions }}>\n        <CardTitle>{title}</CardTitle>\n      </CardHeader>\n    </Card>\n  );\n};\n\nconst AddWidgetDrawer = ({ children }: AddWidgetDrawerProps) => {\n  const [isOpen, toggleOpen] = useAtom(drawerExpandedAtom);\n\n  const panelContent = (\n    <PageSection\n      className=\"pf-v5-u-p-lg\"\n      style={{\n        backgroundColor: '#E7F1FA',\n      }}\n    >\n      <Split className=\"widg-l-split--add-widget\">\n        <SplitItem isFilled>\n          <Title headingLevel=\"h2\" size=\"md\">\n            Add new and previously removed widgets by clicking the <GripVerticalIcon /> icon, then drag and drop to a new location. Drag the corners\n            of the cards to resize widgets.\n          </Title>\n        </SplitItem>\n        <SplitItem>\n          <Button\n            variant=\"plain\"\n            className=\"pf-v5-u-pt-0 pf-v5-u-pr-0\"\n            onClick={() => {\n              toggleOpen((prev) => !prev);\n            }}\n            icon={<CloseIcon />}\n          />\n        </SplitItem>\n      </Split>\n      <Gallery className=\"widg-l-gallery pf-v5-u-pt-sm\" hasGutter>\n        <GalleryItem>\n          <WidgetWrapper widgetType={WidgetTypes.LargeWidget} title=\"Large widget\">\n            <LargeWidget />\n          </WidgetWrapper>\n        </GalleryItem>\n        <GalleryItem>\n          <WidgetWrapper widgetType={WidgetTypes.MediumWidget} title=\"Medium widget\">\n            <MediumWidget />\n          </WidgetWrapper>\n        </GalleryItem>\n        <GalleryItem>\n          <WidgetWrapper widgetType={WidgetTypes.SmallWidget} title=\"Small widget\">\n            <SmallWidget />\n          </WidgetWrapper>\n        </GalleryItem>\n      </Gallery>\n    </PageSection>\n  );\n  return (\n    <>\n      {isOpen ? <div>{panelContent}</div> : null}\n      {children}\n    </>\n  );\n};\n\nexport default AddWidgetDrawer;\n","import React from 'react';\nimport LargeWidget from './LargeWidget';\nimport { WidgetTypes } from './widgetTypes';\nimport MediumWidget from './MediumWidget';\nimport SmallWidget from './SmallWidget';\n\nconst widgetMapper: {\n  [widgetName in WidgetTypes]: React.ComponentType<React.PropsWithChildren<object>>;\n} = {\n  [WidgetTypes.LargeWidget]: LargeWidget,\n  [WidgetTypes.MediumWidget]: MediumWidget,\n  [WidgetTypes.SmallWidget]: SmallWidget,\n};\n\nexport default widgetMapper;\n","import {\n  Card,\n  CardBody,\n  CardHeader,\n  CardTitle,\n  Divider,\n  Dropdown,\n  DropdownItem,\n  DropdownList,\n  HelperText,\n  HelperTextItem,\n  Icon,\n  MenuToggle,\n  MenuToggleElement,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { CompressIcon, EllipsisVIcon, ExpandIcon, GripVerticalIcon, LockIcon, MinusCircleIcon, UnlockIcon } from '@patternfly/react-icons';\nimport React, { Fragment, useMemo, useState } from 'react';\nimport clsx from 'clsx';\n\nimport './GridTile.scss';\nimport { Layout } from 'react-grid-layout';\nimport { WidgetTypes } from '../Widgets/widgetTypes';\nimport widgetMapper from '../Widgets/widgetMapper';\nimport { ExtendedLayoutItem } from '../../api/dashboard-templates';\n\nimport { BaconIcon } from '@patternfly/react-icons';\n\nexport type SetWidgetAttribute = <T extends string | number | boolean>(id: string, attributeName: keyof ExtendedLayoutItem, value: T) => void;\n\nexport type GridTileProps = React.PropsWithChildren<{\n  widgetType: WidgetTypes;\n  title: string;\n  setIsDragging: (isDragging: boolean) => void;\n  isDragging: boolean;\n  setWidgetAttribute: SetWidgetAttribute;\n  widgetConfig: Layout & {\n    colWidth: number;\n    locked?: boolean;\n  };\n  removeWidget: (id: string) => void;\n}>;\n\nconst GridTile = ({ widgetType, title, isDragging, setIsDragging, setWidgetAttribute, widgetConfig, removeWidget }: GridTileProps) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const Component = widgetMapper[widgetType] || Fragment;\n\n  const dropdownItems = useMemo(() => {\n    const isMaximized = widgetConfig.h === widgetConfig.maxH;\n    const isMinimized = widgetConfig.h === widgetConfig.minH;\n    return (\n      <>\n        <DropdownItem\n          onClick={() => {\n            setIsOpen(false);\n            setWidgetAttribute(widgetConfig.i, 'static', !widgetConfig.static);\n          }}\n          icon={widgetConfig.static ? <UnlockIcon /> : <LockIcon />}\n        >\n          {widgetConfig.static ? 'Unlock location and size' : 'Lock location and size'}\n        </DropdownItem>\n        <DropdownItem\n          isDisabled={isMaximized || widgetConfig.static}\n          onClick={() => {\n            setWidgetAttribute(widgetConfig.i, 'h', widgetConfig.maxH ?? widgetConfig.h);\n            setIsOpen(false);\n          }}\n          icon={<ExpandIcon />}\n        >\n          Autosize height to content\n        </DropdownItem>\n        <DropdownItem\n          onClick={() => {\n            setWidgetAttribute(widgetConfig.i, 'h', widgetConfig.minH ?? widgetConfig.h);\n            setIsOpen(false);\n          }}\n          isDisabled={isMinimized || widgetConfig.static}\n          icon={<CompressIcon />}\n        >\n          Minimize height\n        </DropdownItem>\n        <DropdownItem\n          onClick={() => {\n            removeWidget(widgetConfig.i);\n          }}\n          icon={\n            <Icon status={widgetConfig.static ? undefined : 'danger'}>\n              <MinusCircleIcon />\n            </Icon>\n          }\n          isDisabled={widgetConfig.static}\n        >\n          Remove\n          <HelperText>\n            <HelperTextItem variant=\"indeterminate\">{\"All 'removed' widgets can be added back by clicking the 'Add widgets' button.\"}</HelperTextItem>\n          </HelperText>\n        </DropdownItem>\n      </>\n    );\n  }, [widgetConfig.minH, widgetConfig.maxH, widgetConfig.h, widgetConfig.i, widgetConfig.static, setWidgetAttribute]);\n\n  const headerActions = (\n    <>\n      <Tooltip content={<p>Actions</p>}>\n        <Dropdown\n          popperProps={{\n            appendTo: document.body,\n          }}\n          toggle={(toggleRef: React.Ref<MenuToggleElement>) => (\n            <MenuToggle\n              ref={toggleRef}\n              isExpanded={isOpen}\n              onClick={() => setIsOpen((prev) => !prev)}\n              variant=\"plain\"\n              aria-label=\"Card title inline with images and actions example kebab toggle\"\n            >\n              <EllipsisVIcon aria-hidden=\"true\" />\n            </MenuToggle>\n          )}\n          isOpen={isOpen}\n          onOpenChange={(isOpen: boolean) => setIsOpen(isOpen)}\n        >\n          <DropdownList>{dropdownItems}</DropdownList>\n        </Dropdown>\n      </Tooltip>\n      <Tooltip content={<p>{widgetConfig.static ? 'Widget locked' : 'Move'}</p>}>\n        <Icon\n          onMouseDown={() => setIsDragging(true)}\n          onMouseUp={() => setIsDragging(false)}\n          className={clsx('drag-handle', {\n            dragging: isDragging,\n          })}\n        >\n          <GripVerticalIcon style={{ fill: '#6a6e73' }} />\n        </Icon>\n      </Tooltip>\n    </>\n  );\n\n  return (\n    <Card\n      className={clsx('grid-tile', {\n        static: widgetConfig.static,\n      })}\n    >\n      <CardHeader actions={{ actions: headerActions }}>\n        <CardTitle>\n          <Icon className=\"pf-v5-u-pr-sm\" isInline>\n            <BaconIcon />\n          </Icon>\n          {title}\n        </CardTitle>\n      </CardHeader>\n      <Divider />\n      <CardBody>\n        <Component></Component>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default GridTile;\n","import { WidgetTypes } from './widgetTypes';\n\nexport const widgetDefaultWidth: { [widgetName in WidgetTypes]: number } = {\n  [WidgetTypes.LargeWidget]: 3,\n  [WidgetTypes.MediumWidget]: 1,\n  [WidgetTypes.SmallWidget]: 1,\n};\n\nexport const widgetDefaultHeight: { [widgetName in WidgetTypes]: number } = {\n  [WidgetTypes.LargeWidget]: 3,\n  [WidgetTypes.MediumWidget]: 2,\n  [WidgetTypes.SmallWidget]: 1,\n};\n\n// these will depend entirely on widget implementation\nexport const widgetMaxHeight: { [widgetName in WidgetTypes]: number } = {\n  [WidgetTypes.LargeWidget]: 6,\n  [WidgetTypes.MediumWidget]: 4,\n  [WidgetTypes.SmallWidget]: 2,\n};\n\nexport const widgetMinHeight: { [widgetName in WidgetTypes]: number } = {\n  [WidgetTypes.LargeWidget]: 1,\n  [WidgetTypes.MediumWidget]: 1,\n  [WidgetTypes.SmallWidget]: 1,\n};\n","import { isEqual } from 'lodash';\nimport { atom } from 'jotai';\nimport { ExtendedLayoutItem, Variants } from '../api/dashboard-templates';\n\nexport const initialLayout: ExtendedLayoutItem[] = [];\n\nexport function isDefaultLayout(layout: ExtendedLayoutItem[]) {\n  return isEqual(initialLayout, layout);\n}\n\nexport const layoutVariantAtom = atom<Variants>('xl');\n\nexport const layoutAtom = atom<ExtendedLayoutItem[]>(initialLayout);\n\nexport const prevLayoutAtom = atom<ExtendedLayoutItem[]>(initialLayout);\n\nexport const activeItemAtom = atom<string | undefined>(undefined);\n","import { atom } from 'jotai';\nimport { ExtendedTemplateConfig } from '../api/dashboard-templates';\n\nexport const initialTemplate: ExtendedTemplateConfig = { sm: [], md: [], lg: [], xl: [] };\n\nexport const templateAtom = atom<ExtendedTemplateConfig>(initialTemplate);\n\nexport const templateIdAtom = atom<number>(-1);\n","import { Layout } from 'react-grid-layout';\nimport { WidgetTypes } from '../Components/Widgets/widgetTypes';\nimport { dropping_elem_id } from '../Components/DnDLayout/GridLayout';\n\nconst getRequestHeaders = (token: string) => ({\n  Accept: 'application/json',\n  Authorization: `Bearer ${token}`,\n  'Content-Type': 'application/json',\n});\n\nexport type LayoutTypes = 'landingPage';\n\nexport type Variants = 'sm' | 'md' | 'lg' | 'xl';\n\nexport type LayoutWithTitle = Layout & { title: string };\n\nexport type TemplateConfig = {\n  [k in Variants]: LayoutWithTitle[];\n};\n\nexport type PartialTemplateConfig = Partial<TemplateConfig>;\n\n// extended type the UI tracks but not the backend\nexport type ExtendedLayoutItem = LayoutWithTitle & {\n  widgetType: WidgetTypes;\n  locked?: boolean;\n};\n\n// extended type the UI tracks but not the backend\nexport type ExtendedTemplateConfig = {\n  [k in Variants]: ExtendedLayoutItem[];\n};\n\n// extended type the UI tracks but not the backend\nexport type PartialExtendedTemplateConfig = Partial<ExtendedTemplateConfig>;\n\nexport type BaseTemplate = {\n  name: string;\n  displayName: string;\n  templateConfig: TemplateConfig;\n};\n\nexport type DashboardTemplate = {\n  id: number;\n  createdAt: string;\n  updatedAt: string;\n  deletedAt: string | null;\n  userIdentityID: number;\n  default: boolean;\n  TemplateBase: {\n    name: string;\n    displayName: string;\n  };\n  templateConfig: TemplateConfig;\n};\n\n// TODO use dynamic-plugin-sdk CustomError as base class instead\nexport class DashboardTemplatesError extends Error {\n  constructor(message: string, readonly status: number, readonly response: Response) {\n    super(message);\n\n    Object.defineProperty(this, 'name', {\n      value: new.target.name,\n      configurable: true,\n    });\n\n    if (typeof Error.captureStackTrace === 'function') {\n      Error.captureStackTrace(this, this.constructor);\n    } else {\n      this.stack = new Error(message).stack;\n    }\n  }\n}\n\nconst handleErrors = (resp: Response) => {\n  if (!resp.ok) {\n    throw new DashboardTemplatesError('chrome-service dashboard-templates API fetch error', resp.status, resp);\n  }\n};\n\nexport async function getBaseDashboardTemplate(token: string): Promise<BaseTemplate[]>;\nexport async function getBaseDashboardTemplate(token: string, type: LayoutTypes): Promise<BaseTemplate>;\nexport async function getBaseDashboardTemplate(token: string, type?: LayoutTypes): Promise<BaseTemplate | BaseTemplate[]> {\n  const resp = await fetch(`/api/chrome-service/v1/dashboard-templates/base-template${type ? `?dashboard=${type}` : ''}`, {\n    method: 'GET',\n    headers: getRequestHeaders(token),\n  });\n  handleErrors(resp);\n  const json = await resp.json();\n  return json.data;\n}\n\n// Returns multiple templates for a user (user can have multiple template copies) - we will render the one marked default: true by default\nexport async function getDashboardTemplates(token: string): Promise<DashboardTemplate[]>;\nexport async function getDashboardTemplates(token: string, type: LayoutTypes): Promise<DashboardTemplate[]>;\nexport async function getDashboardTemplates(token: string, type?: LayoutTypes): Promise<DashboardTemplate | DashboardTemplate[]> {\n  const resp = await fetch(`/api/chrome-service/v1/dashboard-templates${type ? `?dashboard=${type}` : ''}`, {\n    method: 'GET',\n    headers: getRequestHeaders(token),\n  });\n  handleErrors(resp);\n  const json = await resp.json();\n  return json.data;\n}\n\nexport const patchDashboardTemplate = async (\n  templateId: DashboardTemplate['id'],\n  data: { templateConfig: PartialTemplateConfig },\n  token: string\n): Promise<DashboardTemplate> => {\n  const resp = await fetch(`/api/chrome-service/v1/dashboard-templates/${templateId}`, {\n    method: 'PATCH',\n    headers: getRequestHeaders(token),\n    body: JSON.stringify(data),\n  });\n  handleErrors(resp);\n  const json = await resp.json();\n  return json.data;\n};\n\nexport const deleteDashboardTemplate = async (templateId: DashboardTemplate['id'], token: string): Promise<boolean> => {\n  const resp = await fetch(`/api/chrome-service/v1/dashboard-templates/${templateId}`, {\n    method: 'DELETE',\n    headers: getRequestHeaders(token),\n  });\n  handleErrors(resp);\n  return resp.status === 204;\n};\n\nexport const getDefaultTemplate = (templates: DashboardTemplate[]): DashboardTemplate | undefined => {\n  return templates.find((itm) => itm.default === true);\n};\n\nexport const mapWidgetDefaults = (id: string): [WidgetTypes, string] => {\n  const [widgetType, i] = id.split('#');\n  // we will need some type guards here and schema validation to remove unknown widgets\n  return [widgetType as WidgetTypes, i];\n};\n\nexport const mapLayoutWithTitleToExtendedLayout = (layoutWithTitle: LayoutWithTitle): ExtendedLayoutItem => {\n  return {\n    ...layoutWithTitle,\n    widgetType: mapWidgetDefaults(layoutWithTitle.i)[0],\n  };\n};\n\nexport const mapTemplateConfigToExtendedTemplateConfig = (templateConfig: TemplateConfig): ExtendedTemplateConfig => {\n  const result: ExtendedTemplateConfig = { sm: [], md: [], lg: [], xl: [] };\n  (Object.keys(templateConfig) as Variants[]).forEach((key) => {\n    result[key] = templateConfig[key].map(mapLayoutWithTitleToExtendedLayout);\n  });\n  return result;\n};\n\nexport const mapExtendedLayoutToLayoutWithTitle = (extendedLayoutItem: ExtendedLayoutItem): LayoutWithTitle => {\n  const { x, y, h, i, w, title, maxH, minH, static: isStatic } = extendedLayoutItem;\n  return { x, y, h, i, w, title, maxH, minH, static: isStatic };\n};\n\nexport const mapExtendedTemplateConfigToTemplateConfig = (extendedTemplateConfig: ExtendedTemplateConfig): TemplateConfig => {\n  const result: TemplateConfig = { sm: [], md: [], lg: [], xl: [] };\n  (Object.keys(extendedTemplateConfig) as Variants[]).forEach((key) => {\n    result[key] = extendedTemplateConfig[key].map(mapExtendedLayoutToLayoutWithTitle).filter(({ i }) => i !== dropping_elem_id);\n  });\n  return result;\n};\n\nexport const mapPartialExtendedTemplateConfigToPartialTemplateConfig = (\n  extendedTemplateConfig: PartialExtendedTemplateConfig\n): PartialTemplateConfig => {\n  const result: PartialTemplateConfig = {};\n  (Object.keys(extendedTemplateConfig) as Variants[]).forEach((key) => {\n    result[key] = extendedTemplateConfig[key]?.map(mapExtendedLayoutToLayoutWithTitle).filter(({ i }) => i !== dropping_elem_id);\n  });\n  return result;\n};\n","import { useEffect, useState } from 'react';\n\nconst useLoaded = (loader: () => Promise<void>) => {\n  const [isLoaded, setLoaded] = useState(false);\n  useEffect(() => {\n    (async () => {\n      await loader();\n      setLoaded(true);\n    })();\n  }, []);\n\n  return isLoaded;\n};\n\nexport default useLoaded;\n","import { useState } from 'react';\nimport useLoaded from './useLoaded';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport { ChromeUser } from '@redhat-cloud-services/types';\n\nconst useCurrentUser = () => {\n  const [currentUser, setCurrentUser] = useState<ChromeUser['identity']['user']>(undefined);\n  const [currentToken, setCurrentToken] = useState<string>('');\n  const chrome = useChrome();\n\n  const isLoaded = useLoaded(async () => {\n    const user = await chrome.auth.getUser();\n    if (user) {\n      setCurrentUser(user.identity.user);\n    }\n    const token = await chrome.auth.getToken();\n    if (token) {\n      setCurrentToken(token);\n    }\n  });\n\n  return {\n    isLoaded,\n    currentUser,\n    currentToken,\n  };\n};\n\nexport default useCurrentUser;\n","import 'react-grid-layout/css/styles.css';\nimport './GridLayout.scss';\nimport { Layout, ReactGridLayoutProps, Responsive, ResponsiveProps, WidthProvider } from 'react-grid-layout';\nimport ResizeHandleIcon from './resize-handle.svg';\nimport GridTile, { SetWidgetAttribute } from './GridTile';\nimport { KeyboardEvent, useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { isWidgetType } from '../Widgets/widgetTypes';\nimport { widgetDefaultHeight, widgetDefaultWidth, widgetMaxHeight, widgetMinHeight } from '../Widgets/widgetDefaults';\nimport { useAtom } from 'jotai';\nimport { currentDropInItemAtom } from '../../state/currentDropInItemAtom';\nimport { activeItemAtom, layoutAtom, layoutVariantAtom, prevLayoutAtom } from '../../state/layoutAtom';\nimport { templateAtom, templateIdAtom } from '../../state/templateAtom';\nimport React from 'react';\nimport {\n  DashboardTemplate,\n  ExtendedLayoutItem,\n  Variants,\n  getDashboardTemplates,\n  getDefaultTemplate,\n  mapPartialExtendedTemplateConfigToPartialTemplateConfig,\n  mapTemplateConfigToExtendedTemplateConfig,\n  patchDashboardTemplate,\n} from '../../api/dashboard-templates';\nimport useCurrentUser from '../../hooks/useCurrentUser';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { debounce, isEqual } from 'lodash';\n\nexport const dropping_elem_id = '__dropping-elem__';\n\nexport const breakpoints = { xl: 1100, lg: 996, md: 768, sm: 480 };\n\nconst ResponsiveGridLayout = WidthProvider(Responsive);\n\nconst getResizeHandle = (resizeHandleAxis: string, ref: React.Ref<HTMLDivElement>) => {\n  return (\n    <div ref={ref} className={`react-resizable-handle react-resizable-handle-${resizeHandleAxis}`}>\n      <img src={ResizeHandleIcon} />\n    </div>\n  );\n};\n\nconst GridLayout = ({ isLayoutLocked = false }: { isLayoutLocked?: boolean }) => {\n  const [isDragging, setIsDragging] = useState(false);\n  const [isInitialRender, setIsInitialRender] = useState(true);\n  const [layout, setLayout] = useAtom(layoutAtom);\n  const [prevLayout, setPrevLayout] = useAtom(prevLayoutAtom);\n  const [layoutVariant, setLayoutVariant] = useAtom(layoutVariantAtom);\n  const [template, setTemplate] = useAtom(templateAtom);\n  const [templateId, setTemplateId] = useAtom(templateIdAtom);\n  const [activeItem, setActiveItem] = useAtom(activeItemAtom);\n  const layoutRef = useRef<HTMLDivElement>(null);\n  const { currentToken } = useCurrentUser();\n  const dispatch = useDispatch();\n\n  const [currentDropInItem, setCurrentDropInItem] = useAtom(currentDropInItemAtom);\n  const droppingItemTemplate: ReactGridLayoutProps['droppingItem'] = useMemo(() => {\n    if (currentDropInItem) {\n      return {\n        i: dropping_elem_id,\n        w: widgetDefaultWidth[currentDropInItem],\n        h: widgetDefaultHeight[currentDropInItem],\n        widgetType: currentDropInItem,\n        title: 'New title',\n      };\n    }\n  }, [currentDropInItem]);\n\n  const setWidgetAttribute: SetWidgetAttribute = (id, attributeName, value) => {\n    setLayout((prev) => prev.map((item) => (item.i === id ? { ...item, [attributeName]: value } : item)));\n  };\n\n  const removeWidget = (id: string) => {\n    setLayout((prev) => prev.filter((item) => item.i !== id));\n  };\n\n  const onDrop: ReactGridLayoutProps['onDrop'] = (_layout: ExtendedLayoutItem[], layoutItem: ExtendedLayoutItem, event: DragEvent) => {\n    const data = event.dataTransfer?.getData('text') || '';\n    // fix placement order\n    if (isWidgetType(data)) {\n      const newWidget = {\n        ...layoutItem,\n        // w: layoutItem.x + layoutItem.w > 3 ? 1 : 3,\n        // x: 4 % layoutItem.w,\n        // x: layoutItem.x + layoutItem.w > 3 ? 3 : 0,\n        h: widgetDefaultHeight[data],\n        maxH: widgetMaxHeight[data],\n        minH: widgetMinHeight[data],\n        widgetType: data,\n        i: `${data}#${Date.now() + Math.random()}`,\n        title: 'New title',\n      };\n      setCurrentDropInItem(undefined);\n      setLayout((prev) =>\n        prev.reduce<ExtendedLayoutItem[]>(\n          (acc, curr) => {\n            if (curr.x + curr.w > newWidget.x && curr.y + curr.h <= newWidget.y) {\n              acc.push(curr);\n            } else {\n              // Wee need to push the current items down on the Y axis if they are supposed to be below the new widget\n              acc.push({ ...curr, y: curr.y + curr.h });\n            }\n\n            return acc;\n          },\n          [newWidget]\n        )\n      );\n    }\n    event.preventDefault();\n  };\n\n  const activeLayout = useMemo(\n    () =>\n      layout.map((item) => ({\n        ...item,\n        locked: isLayoutLocked ? isLayoutLocked : item.locked,\n      })),\n    [isLayoutLocked, layout]\n  );\n\n  const onLayoutChange: ResponsiveProps['onLayoutChange'] = useCallback(\n    (currentLayout: Layout[]) => {\n      if (isInitialRender) {\n        setIsInitialRender(false);\n        return;\n      }\n      if (isLayoutLocked || templateId < 0 || !layoutVariant || currentDropInItem) {\n        return;\n      }\n      // TODO in certain scenarios prevLayout contains additional undefined metadata on each widget causing this check to fail and multiple patches for dropping widgets in\n      if (isEqual(prevLayout, layout)) {\n        return;\n      }\n      const data = mapPartialExtendedTemplateConfigToPartialTemplateConfig({ [layoutVariant]: currentLayout });\n      patchDashboardTemplate(templateId, { templateConfig: data }, currentToken)\n        .then((template: DashboardTemplate) => {\n          const extendedTemplateConfig = mapTemplateConfigToExtendedTemplateConfig(template.templateConfig);\n          setTemplate(extendedTemplateConfig);\n          setPrevLayout(layout);\n          setLayout(extendedTemplateConfig[layoutVariant]);\n        })\n        .catch((err) => {\n          console.error(err);\n          dispatch(\n            addNotification({\n              variant: 'danger',\n              title: 'Failed to patch dashboard configuration',\n              description: 'Your dashboard changes were unable to be saved.',\n            })\n          );\n        });\n    },\n    [isLayoutLocked, templateId, layoutVariant, currentToken, layout, currentDropInItem, isInitialRender]\n  );\n\n  const debouncedOnLayoutChange = debounce(onLayoutChange, 500);\n\n  const onBreakpointChange: ResponsiveProps['onBreakpointChange'] = (newBreakpoint) => {\n    setLayoutVariant(newBreakpoint as Variants);\n  };\n\n  const onKeyUp = (event: KeyboardEvent<HTMLDivElement>, id: string) => {\n    if (event.code === 'Enter') {\n      event.preventDefault();\n      event.stopPropagation();\n      setActiveItem((prev) => {\n        if (prev === id) {\n          return undefined;\n        }\n        return id;\n      });\n    }\n  };\n\n  const handleArrows = useCallback(\n    (e: globalThis.KeyboardEvent) => {\n      if (!activeItem) {\n        return;\n      }\n\n      const item = layout.find(({ i }) => i === activeItem);\n      if (!item) {\n        return;\n      }\n\n      e.stopPropagation();\n      e.preventDefault();\n\n      if (e.code === 'ArrowUp') {\n        setLayout((prev) =>\n          prev.map((layoutItem) => {\n            if (layoutItem.i === activeItem) {\n              return {\n                ...layoutItem,\n                y: Math.max(layoutItem.y - 1, 0),\n              };\n            }\n            return layoutItem;\n          })\n        );\n      }\n\n      if (e.code === 'ArrowDown') {\n        setLayout((prev) =>\n          prev.map((layoutItem) => {\n            if (layoutItem.i === activeItem) {\n              return {\n                ...layoutItem,\n                y: layoutItem.y + 1,\n              };\n            }\n            return layoutItem;\n          })\n        );\n      }\n\n      if (e.code === 'ArrowLeft') {\n        setLayout((prev) =>\n          prev.map((layoutItem) => {\n            if (layoutItem.i === activeItem) {\n              return {\n                ...layoutItem,\n                x: Math.max(layoutItem.x - 1, 0),\n              };\n            }\n            return layoutItem;\n          })\n        );\n      }\n\n      if (e.code === 'ArrowRight') {\n        setLayout((prev) =>\n          prev.map((layoutItem) => {\n            if (layoutItem.i === activeItem) {\n              return {\n                ...layoutItem,\n                x: layoutItem.x + 1,\n              };\n            }\n            return layoutItem;\n          })\n        );\n      }\n    },\n    [activeItem]\n  );\n\n  useEffect(() => {\n    if (activeItem && layoutRef.current) {\n      layoutRef.current.addEventListener('keydown', handleArrows);\n    }\n    return () => {\n      layoutRef.current?.removeEventListener('keydown', handleArrows);\n    };\n  }, [activeItem]);\n\n  useEffect(() => {\n    if (!currentToken || templateId >= 0) {\n      return;\n    }\n    // TODO template type should be pulled from app config for reusability\n    getDashboardTemplates(currentToken, 'landingPage')\n      .then((templates) => {\n        const defaultTemplate = getDefaultTemplate(templates);\n        if (!defaultTemplate) {\n          throw new Error('No default template found');\n        }\n        const extendedTemplateConfig = mapTemplateConfigToExtendedTemplateConfig(defaultTemplate.templateConfig);\n        const currentWidth = layoutRef?.current?.clientWidth || document.body.clientWidth;\n        let targetVariant: Variants;\n        if (currentWidth > breakpoints.lg) {\n          targetVariant = 'xl';\n        } else if (breakpoints.lg >= currentWidth && currentWidth > breakpoints.md) {\n          targetVariant = 'lg';\n        } else if (breakpoints.md >= currentWidth && currentWidth > breakpoints.sm) {\n          targetVariant = 'md';\n        } else {\n          targetVariant = 'sm';\n        }\n        setTemplate(extendedTemplateConfig);\n        setTemplateId(defaultTemplate.id);\n        setLayout(extendedTemplateConfig[targetVariant]);\n        setLayoutVariant(targetVariant);\n      })\n      .catch((err) => {\n        console.log(err);\n        dispatch(\n          addNotification({\n            variant: 'danger',\n            title: 'Failed to fetch dashboard template',\n            description: 'Try reloading the page.',\n          })\n        );\n      });\n  }, [currentToken, templateId]);\n\n  return (\n    // {/* relative position is required for the grid layout to properly calculate\n    // child translation while dragging is in progress */}\n    <div style={{ position: 'relative' }} ref={layoutRef}>\n      <ResponsiveGridLayout\n        className=\"layout\"\n        draggableHandle=\".drag-handle\"\n        layouts={template}\n        breakpoints={breakpoints}\n        cols={{ xl: 4, lg: 3, md: 2, sm: 1 }}\n        rowHeight={88}\n        //width={1200}\n        isDraggable={!isLayoutLocked}\n        isResizable={!isLayoutLocked}\n        resizeHandle={getResizeHandle}\n        resizeHandles={['sw', 'nw', 'se', 'ne']}\n        // add droppping item default based on dragged template\n        droppingItem={droppingItemTemplate}\n        isDroppable={!isLayoutLocked}\n        onDrop={onDrop}\n        useCSSTransforms\n        verticalCompact\n        onLayoutChange={debouncedOnLayoutChange}\n        onBreakpointChange={onBreakpointChange}\n      >\n        {\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          activeLayout.map(({ widgetType, title, ...rest }, index) => (\n            <div\n              key={rest.i}\n              data-grid={rest}\n              onKeyUp={(e) => onKeyUp(e, rest.i)}\n              tabIndex={index}\n              style={{\n                boxShadow: activeItem === rest.i ? '0 0 2px 2px #2684FF' : 'none',\n                ...(activeItem === rest.i ? { outline: 'none' } : {}),\n              }}\n            >\n              <GridTile\n                isDragging={isDragging}\n                setIsDragging={setIsDragging}\n                title={rest.i}\n                widgetType={widgetType}\n                // these will be dynamically calculated once the dimensions are calculated\n                widgetConfig={{ ...rest, colWidth: 1200 / 4 }}\n                setWidgetAttribute={setWidgetAttribute}\n                removeWidget={removeWidget}\n              >\n                {rest.i}\n              </GridTile>\n            </div>\n          ))\n        }\n      </ResponsiveGridLayout>\n    </div>\n  );\n};\n\nexport default GridLayout;\n","import { atom } from 'jotai';\n\nexport const lockedLayoutAtom = atom(false);\n","import './Header.scss';\n\nimport {\n  Button,\n  ButtonType,\n  ClipboardCopy,\n  Dropdown,\n  DropdownGroup,\n  DropdownItem,\n  DropdownList,\n  Flex,\n  FlexItem,\n  Form,\n  FormGroup,\n  FormHelperText,\n  HelperText,\n  HelperTextItem,\n  MenuToggle,\n  MenuToggleElement,\n  PageSection,\n  PageSectionVariants,\n  Radio,\n  Stack,\n  StackItem,\n  Text,\n  TextArea,\n  TextContent,\n  Toolbar,\n  ToolbarContent,\n  ToolbarGroup,\n  ToolbarItem,\n} from '@patternfly/react-core';\nimport { CheckIcon, ExclamationCircleIcon, PlusCircleIcon, TimesIcon } from '@patternfly/react-icons';\nimport React from 'react';\nimport { useAtom, useSetAtom } from 'jotai';\nimport { drawerExpandedAtom } from '../../state/drawerExpandedAtom';\nimport { initialLayout, isDefaultLayout, layoutAtom, prevLayoutAtom } from '../../state/layoutAtom';\nimport useCurrentUser from '../../hooks/useCurrentUser';\n\nconst Controls = () => {\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [customValue, setCustomValue] = React.useState('');\n  const [customValueValidationError, setCustomValueValidationError] = React.useState('');\n  const toggleOpen = useSetAtom(drawerExpandedAtom);\n  const setPrevLayout = useSetAtom(prevLayoutAtom);\n  const [layout, setLayout] = useAtom(layoutAtom);\n  const CONSOLE_DEFAULT = 'console-default';\n  const CUSTOM = 'custom';\n  const [checked, setChecked] = React.useState(isDefaultLayout(layout) ? CONSOLE_DEFAULT : CUSTOM);\n\n  const onToggleClick = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const onCustomConfigSubmit = (e: { preventDefault: () => void }) => {\n    e.preventDefault();\n    if (!customValue) {\n      setCustomValueValidationError('Input value is required.');\n      return;\n    }\n    try {\n      const layout = JSON.parse(customValue);\n      if (isDefaultLayout(layout)) {\n        setChecked(CONSOLE_DEFAULT);\n      }\n      setLayout(layout);\n      setIsOpen(false);\n      setCustomValue('');\n    } catch (e) {\n      console.error(e);\n      setCustomValueValidationError('Invalid input value.');\n      return;\n    }\n  };\n\n  const onDefaultConfigSubmit = (e: { preventDefault: () => void }) => {\n    e.preventDefault();\n    setChecked(CONSOLE_DEFAULT);\n    setLayout(initialLayout);\n    setIsOpen(false);\n    setCustomValue('');\n  };\n\n  return (\n    <ToolbarGroup>\n      <ToolbarItem spacer={{ default: 'spacerNone' }}>\n        <ClipboardCopy\n          isCode\n          hoverTip=\"Copy current configuration string\"\n          position=\"left\"\n          maxWidth=\"300px\"\n          clickTip=\"Configuration string copied to clipboard\"\n        >\n          {JSON.stringify(layout)}\n        </ClipboardCopy>\n      </ToolbarItem>\n      <ToolbarItem spacer={{ default: 'spacerSm' }}>\n        <Stack>\n          <StackItem>\n            <Dropdown\n              isOpen={isOpen}\n              activeItemId={0}\n              onOpenChange={(isOpen: boolean) => {\n                setIsOpen(isOpen);\n                setChecked(isDefaultLayout(layout) ? CONSOLE_DEFAULT : CUSTOM);\n                setCustomValueValidationError('');\n              }}\n              toggle={(toggleRef: React.Ref<MenuToggleElement>) => (\n                <MenuToggle ref={toggleRef} onClick={onToggleClick} isExpanded={isOpen}>\n                  Config view: {checked}\n                </MenuToggle>\n              )}\n            >\n              <DropdownGroup label=\"Dashboard configuration\" labelHeadingLevel=\"h3\">\n                <DropdownList className=\"pf-v5-u-pb-0\">\n                  <Form>\n                    <FormGroup>\n                      <DropdownItem>\n                        <Radio\n                          name=\"config\"\n                          id={CONSOLE_DEFAULT}\n                          label={CONSOLE_DEFAULT}\n                          value={CONSOLE_DEFAULT}\n                          onClick={(e) => {\n                            onToggleClick();\n                            setCustomValueValidationError('');\n                            setChecked(CONSOLE_DEFAULT);\n                            onDefaultConfigSubmit(e);\n                          }}\n                          checked={checked === CONSOLE_DEFAULT}\n                        ></Radio>\n                      </DropdownItem>\n                      <DropdownItem>\n                        <Radio\n                          name=\"config\"\n                          id={CUSTOM}\n                          label=\"Custom configuration\"\n                          value={CUSTOM}\n                          onClick={() => {\n                            setChecked(CUSTOM);\n                          }}\n                          checked={checked === CUSTOM}\n                        ></Radio>\n                        <TextArea\n                          className=\"pf-v5-u-mt-sm\"\n                          rows={1}\n                          placeholder=\"Paste custom string\"\n                          required\n                          onClick={() => {\n                            setChecked(CUSTOM);\n                          }}\n                          onChange={(_event, value) => {\n                            setCustomValue(value);\n                          }}\n                        ></TextArea>\n                        <FormHelperText>\n                          <HelperText>\n                            <HelperTextItem\n                              variant={customValueValidationError ? 'error' : 'default'}\n                              {...(customValueValidationError && { icon: <ExclamationCircleIcon /> })}\n                            >\n                              {customValueValidationError}\n                            </HelperTextItem>\n                          </HelperText>\n                        </FormHelperText>\n                        <div hidden={checked !== CUSTOM}>\n                          <Button variant=\"plain\" type={ButtonType.submit} onClick={onCustomConfigSubmit}>\n                            <CheckIcon />\n                          </Button>\n                          <Button\n                            variant=\"plain\"\n                            type={ButtonType.reset}\n                            onClick={() => {\n                              setIsOpen(false);\n                              setChecked(isDefaultLayout(layout) ? CONSOLE_DEFAULT : CUSTOM);\n                              setCustomValueValidationError('');\n                            }}\n                          >\n                            <TimesIcon />\n                          </Button>\n                        </div>\n                      </DropdownItem>\n                    </FormGroup>\n                  </Form>\n                </DropdownList>\n              </DropdownGroup>\n            </Dropdown>\n          </StackItem>\n        </Stack>\n      </ToolbarItem>\n      <ToolbarItem>\n        <Button\n          onClick={() => {\n            toggleOpen((prev) => !prev);\n            setPrevLayout(layout);\n          }}\n          variant=\"secondary\"\n          icon={<PlusCircleIcon />}\n        >\n          Add widgets\n        </Button>\n      </ToolbarItem>\n    </ToolbarGroup>\n  );\n};\n\nconst Header = () => {\n  const { currentUser } = useCurrentUser();\n  const userName = currentUser?.first_name && currentUser?.last_name ? ` ${currentUser.first_name} ${currentUser.last_name}` : currentUser?.username;\n  return (\n    <PageSection className=\"widg-c-page__main-section--header pf-v5-u-p-lg\" variant={PageSectionVariants.light}>\n      <Flex className=\"widg-l-flex--header\" direction={{ default: 'column', lg: 'row' }}>\n        <FlexItem alignSelf={{ default: 'alignSelfFlexStart' }}>\n          <TextContent>\n            <Text component=\"h1\">Hi{userName ? `, ${userName}` : '!'}</Text>\n            <Text component=\"h2\" className=\"pf-v5-u-mt-0\">\n              Welcome to your Hybrid Cloud Console.\n            </Text>\n          </TextContent>\n        </FlexItem>\n        <FlexItem align={{ default: 'alignLeft', lg: 'alignRight' }}>\n          <Toolbar>\n            <ToolbarContent>\n              <Controls />\n            </ToolbarContent>\n          </Toolbar>\n        </FlexItem>\n      </Flex>\n    </PageSection>\n  );\n};\n\nexport default Header;\n","import { PageSection } from '@patternfly/react-core';\nimport AddWidgetDrawer from '../../Components/WidgetDrawer/WidgetDrawer';\nimport GridLayout from '../../Components/DnDLayout/GridLayout';\nimport { useAtomValue } from 'jotai';\nimport { lockedLayoutAtom } from '../../state/lockedLayoutAtom';\nimport Header from '../../Components/Header/Header';\nimport React from 'react';\n\nconst DefaultRoute = () => {\n  const isLayoutLocked = useAtomValue(lockedLayoutAtom);\n  return (\n    <>\n      <Header />\n      <AddWidgetDrawer dismissible={false}>\n        <PageSection>\n          <GridLayout isLayoutLocked={isLayoutLocked} />\n        </PageSection>\n      </AddWidgetDrawer>\n    </>\n  );\n};\n\nexport default DefaultRoute;\n"],"names":["drawerExpandedAtom","atom","children","WidgetTypes","currentDropInItemAtom","undefined","WidgetWrapper","title","widgetType","setDropInItem","useSetAtom","headerActions","Tooltip","content","Icon","className","style","fill","Card","onDragStart","e","nodeRect","target","getBoundingClientRect","dataTransfer","setDragImage","clientX","left","clientY","top","setData","onDragEnd","unselectable","draggable","CardHeader","actions","CardTitle","useAtom","isOpen","toggleOpen","panelContent","PageSection","backgroundColor","Split","SplitItem","isFilled","Title","headingLevel","size","Button","variant","onClick","prev","icon","Gallery","hasGutter","GalleryItem","LargeWidget","MediumWidget","SmallWidget","isDragging","setIsDragging","setWidgetAttribute","widgetConfig","removeWidget","useState","setIsOpen","Component","Fragment","dropdownItems","useMemo","isMaximized","h","maxH","isMinimized","minH","DropdownItem","i","static","isDisabled","status","HelperText","HelperTextItem","Dropdown","popperProps","appendTo","document","body","toggle","toggleRef","MenuToggle","ref","isExpanded","onOpenChange","DropdownList","onMouseDown","onMouseUp","clsx","c","dragging","isInline","Divider","CardBody","widgetDefaultWidth","widgetDefaultHeight","widgetMaxHeight","widgetMinHeight","initialLayout","isDefaultLayout","layout","isEqual","layoutVariantAtom","layoutAtom","prevLayoutAtom","activeItemAtom","templateAtom","sm","md","lg","xl","templateIdAtom","getRequestHeaders","token","Accept","Authorization","message","response","Object","defineProperty","value","name","configurable","Error","captureStackTrace","constructor","stack","handleErrors","resp","ok","DashboardTemplatesError","mapWidgetDefaults","id","split","mapLayoutWithTitleToExtendedLayout","layoutWithTitle","mapTemplateConfigToExtendedTemplateConfig","templateConfig","result","keys","forEach","key","map","mapExtendedLayoutToLayoutWithTitle","extendedLayoutItem","x","y","w","loader","isLoaded","setLoaded","useEffect","currentUser","setCurrentUser","currentToken","setCurrentToken","chrome","useChrome","auth","getUser","user","identity","getToken","breakpoints","ResponsiveGridLayout","WidthProvider","Responsive","getResizeHandle","resizeHandleAxis","src","isLayoutLocked","isInitialRender","setIsInitialRender","setLayout","prevLayout","setPrevLayout","layoutVariant","setLayoutVariant","template","setTemplate","templateId","setTemplateId","activeItem","setActiveItem","layoutRef","useRef","dispatch","currentDropInItem","setCurrentDropInItem","droppingItemTemplate","attributeName","item","filter","activeLayout","locked","onLayoutChange","useCallback","currentLayout","extendedTemplateConfig","data","Promise","fetch","method","headers","JSON","stringify","json","patchDashboardTemplate","then","catch","err","console","error","description","debouncedOnLayoutChange","debounce","handleArrows","find","stopPropagation","preventDefault","code","layoutItem","Math","max","current","addEventListener","removeEventListener","type","getDashboardTemplates","templates","defaultTemplate","itm","default","getDefaultTemplate","targetVariant","currentWidth","clientWidth","log","position","draggableHandle","layouts","cols","rowHeight","isDraggable","isResizable","resizeHandle","resizeHandles","droppingItem","isDroppable","onDrop","_layout","event","getData","values","includes","Date","now","random","reduce","acc","curr","push","useCSSTransforms","verticalCompact","onBreakpointChange","newBreakpoint","index","rest","onKeyUp","tabIndex","boxShadow","outline","colWidth","lockedLayoutAtom","Controls","customValue","setCustomValue","customValueValidationError","setCustomValueValidationError","CONSOLE_DEFAULT","CUSTOM","checked","setChecked","onToggleClick","ToolbarGroup","ToolbarItem","spacer","ClipboardCopy","isCode","hoverTip","maxWidth","clickTip","Stack","StackItem","activeItemId","DropdownGroup","label","labelHeadingLevel","Form","FormGroup","Radio","onDefaultConfigSubmit","TextArea","rows","placeholder","required","onChange","_event","FormHelperText","hidden","ButtonType","submit","parse","reset","userName","first_name","last_name","username","PageSectionVariants","light","Flex","direction","FlexItem","alignSelf","TextContent","Text","component","align","Toolbar","ToolbarContent","useAtomValue","dismissible"],"sourceRoot":""}