{"version":3,"file":"js/988.bf847780f01999638da0.js","mappings":"iKAAIA,EAAsC,WAStC,OARAA,EAAWC,OAAOC,QAAU,SAASC,GACjC,IAAK,IAAIC,EAAGC,EAAI,EAAGC,EAAIC,UAAUC,OAAQH,EAAIC,EAAGD,IAE5C,IAAK,IAAII,KADTL,EAAIG,UAAUF,GACOJ,OAAOS,UAAUC,eAAeC,KAAKR,EAAGK,KACzDN,EAAEM,GAAKL,EAAEK,IAEjB,OAAON,CACX,EACOH,EAASa,MAAMC,KAAMP,UAChC,EAKWQ,EAAkB,SAAUC,GAAgB,MAAO,CAC1DC,KAAM,KACNC,QAASlB,EAAS,CAAEmB,IAAe,eAJ5B,+BAAgC,IAAIC,MAAOC,UAAYC,KAAKC,SAASC,SAAS,IAAIC,MAAM,KAIzCT,GACtD,EACOU,EAAqB,SAAUC,GAAS,MAAO,CACtDV,KAAM,KACNC,QAASS,EACT,EACOC,EAAqB,WAAc,MAAO,CACjDX,KAAM,KACN,C,0ICSJ,QAtBY,WACV,IAAMY,GAAW,IAAAC,eACTC,GAAO,SAAW,GAY1B,OAVA,IAAAC,YAAU,YACS,UACRC,SAAS,CAAEC,cAAe,OAEnC,IAAMC,EAAaJ,EAAG,kBAAkB,SAACK,GAAU,OAAAP,EAAS,WAAIO,EAAMC,OAAnB,IACnD,OAAO,WACLF,SAAAA,GACF,CACF,GAAG,IAGD,kBAAC,EAAAG,SAAQ,KACP,kBAAC,KAAmB,MACpB,kBAAC,IAAM,MAGb,C,+HCpBA,QANiB,WAAM,OACrB,kBAAC,EAAAC,SAAQ,CAACC,MAAO,IAAI,aAAwD,IAAKC,YAChF,kBAAC,IAAG,MAFe,C,8FCDjBC,GAAU,IAAAC,OAAK,WAAM,yFACrBC,GAAW,IAAAD,OAAK,WAAM,yCAiB5B,QAfe,WAAM,OACnB,kBAAC,EAAAE,SAAQ,CACPC,SACE,kBAAC,EAAAC,SAAQ,KACP,kBAAC,EAAAC,QAAO,QAIZ,kBAAC,SAAS,KACR,kBAAC,EAAAC,MAAK,CAACC,KAAK,IAAIC,QAAS,kBAACT,EAAO,QACjC,kBAAC,EAAAO,MAAK,CAACC,KAAK,IAAIC,QAAS,kBAACP,EAAQ,SAVnB,C,gSCCd,SAASQ,I,IAAK,sDAEnB,OADW,QAAY,CAAC,EAAG,EAAF,CAAG,KAAmB,QAAwB,CAAEC,oBAAqB,CAAC,SAAU,YAAgBC,GAAU,GAErI,C","sources":["webpack:///./node_modules/@redhat-cloud-services/frontend-components-notifications/esm/redux/actions/notifications.js","webpack:///./src/App.tsx","webpack:///./src/AppEntry.tsx","webpack:///./src/Routes.tsx","webpack:///./src/store/index.ts"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { ADD_NOTIFICATION, CLEAR_NOTIFICATIONS, REMOVE_NOTIFICATION } from './action-types';\nfunction generateID(type) {\n    return 'cloud-services' + type + '-' + new Date().getTime() + Math.random().toString(36).slice(2);\n}\nexport var addNotification = function (notification) { return ({\n    type: ADD_NOTIFICATION,\n    payload: __assign({ id: generateID('notification') }, notification),\n}); };\nexport var removeNotification = function (index) { return ({\n    type: REMOVE_NOTIFICATION,\n    payload: index,\n}); };\nexport var clearNotifications = function () { return ({\n    type: CLEAR_NOTIFICATIONS,\n}); };\nexport default {\n    addNotification: addNotification,\n    removeNotification: removeNotification,\n    clearNotifications: clearNotifications,\n};\n//# sourceMappingURL=notifications.js.map","import React, { Fragment, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Reducer } from 'redux';\n\nimport Routes from './Routes';\nimport './App.scss';\n\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst App = () => {\n  const navigate = useNavigate();\n  const { on } = useChrome();\n\n  useEffect(() => {\n    const registry = getRegistry();\n    registry.register({ notifications: notificationsReducer as Reducer });\n\n    const unregister = on('APP_NAVIGATION', (event) => navigate(`/${event.navId}`));\n    return () => {\n      unregister?.();\n    };\n  }, []);\n\n  return (\n    <Fragment>\n      <NotificationsPortal />\n      <Routes />\n    </Fragment>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { init } from './store';\nimport App from './App';\nimport logger from 'redux-logger';\n\nconst AppEntry = () => (\n  <Provider store={init(...(process.env.NODE_ENV !== 'production' ? [logger] : [])).getStore()}>\n    <App />\n  </Provider>\n);\n\nexport default AppEntry;\n","import React, { Suspense, lazy } from 'react';\nimport { Routes as DomRoutes, Route } from 'react-router-dom';\n\nimport { Bullseye, Spinner } from '@patternfly/react-core';\n\nconst Default = lazy(() => import(/* webpackChunkName: \"DefaultRoute\" */ './Routes/Default/Default'));\nconst NotFound = lazy(() => import(/* webpackCunkName: \"NotFound\" */ './Routes/404/404'));\n\nconst Routes = () => (\n  <Suspense\n    fallback={\n      <Bullseye>\n        <Spinner />\n      </Bullseye>\n    }\n  >\n    <DomRoutes>\n      <Route path=\"/\" element={<Default />} />\n      <Route path=\"*\" element={<NotFound />} />\n    </DomRoutes>\n  </Suspense>\n);\n\nexport default Routes;\n","import { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\nimport ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { Middleware } from 'redux';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport let registry: ReducerRegistry<any>;\n\nexport function init(...middleware: Middleware[]) {\n  registry = getRegistry({}, [promiseMiddleware, notificationsMiddleware({ errorDescriptionKey: ['detail', 'stack'] }), ...middleware]);\n  return registry;\n}\n"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","addNotification","notification","type","payload","id","Date","getTime","Math","random","toString","slice","removeNotification","index","clearNotifications","navigate","useNavigate","on","useEffect","register","notifications","unregister","event","navId","Fragment","Provider","store","getStore","Default","lazy","NotFound","Suspense","fallback","Bullseye","Spinner","Route","path","element","init","errorDescriptionKey","middleware"],"sourceRoot":""}