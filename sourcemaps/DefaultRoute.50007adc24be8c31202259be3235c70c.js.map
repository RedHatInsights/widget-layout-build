{"version":3,"file":"js/DefaultRoute.9a3e73e4d862ecccd88d.js","mappings":"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","sources":["webpack:///./src/Components/Header/Header.tsx","webpack:///./src/Components/WidgetDrawer/WidgetDrawer.tsx","webpack:///./src/state/lockedLayoutAtom.ts","webpack:///./src/Routes/Default/Default.tsx","webpack:///./src/state/drawerExpandedAtom.ts"],"sourcesContent":["import './Header.scss';\n\nimport {\n  Button,\n  ButtonType,\n  ClipboardCopy,\n  Dropdown,\n  DropdownGroup,\n  DropdownItem,\n  DropdownList,\n  Flex,\n  FlexItem,\n  Form,\n  FormGroup,\n  FormHelperText,\n  HelperText,\n  HelperTextItem,\n  MenuToggle,\n  MenuToggleElement,\n  PageSection,\n  PageSectionVariants,\n  Radio,\n  Stack,\n  StackItem,\n  Text,\n  TextArea,\n  TextContent,\n  Toolbar,\n  ToolbarContent,\n  ToolbarGroup,\n  ToolbarItem,\n} from '@patternfly/react-core';\nimport { CheckIcon, ExclamationCircleIcon, PlusCircleIcon, TimesIcon } from '@patternfly/react-icons';\nimport React from 'react';\nimport { useAtom, useSetAtom } from 'jotai';\nimport { drawerExpandedAtom } from '../../state/drawerExpandedAtom';\nimport { initialLayout, isDefaultLayout, layoutAtom, prevLayoutAtom } from '../../state/layoutAtom';\nimport useCurrentUser from '../../hooks/useCurrentUser';\n\nconst Controls = () => {\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [customValue, setCustomValue] = React.useState('');\n  const [customValueValidationError, setCustomValueValidationError] = React.useState('');\n  const toggleOpen = useSetAtom(drawerExpandedAtom);\n  const setPrevLayout = useSetAtom(prevLayoutAtom);\n  const [layout, setLayout] = useAtom(layoutAtom);\n  const CONSOLE_DEFAULT = 'console-default';\n  const CUSTOM = 'custom';\n  const [checked, setChecked] = React.useState(isDefaultLayout(layout) ? CONSOLE_DEFAULT : CUSTOM);\n\n  const onToggleClick = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const onCustomConfigSubmit = (e: { preventDefault: () => void }) => {\n    e.preventDefault();\n    if (!customValue) {\n      setCustomValueValidationError('Input value is required.');\n      return;\n    }\n    try {\n      const layout = JSON.parse(customValue);\n      if (isDefaultLayout(layout)) {\n        setChecked(CONSOLE_DEFAULT);\n      }\n      setLayout(layout);\n      setIsOpen(false);\n      setCustomValue('');\n    } catch (e) {\n      console.error(e);\n      setCustomValueValidationError('Invalid input value.');\n      return;\n    }\n  };\n\n  const onDefaultConfigSubmit = (e: { preventDefault: () => void }) => {\n    e.preventDefault();\n    setChecked(CONSOLE_DEFAULT);\n    setLayout(initialLayout);\n    setIsOpen(false);\n    setCustomValue('');\n  };\n\n  return (\n    <ToolbarGroup className=\"pf-v5-u-flex-direction-column-reverse pf-v5-u-flex-direction-row-reverse-on-md pf-v5-u-flex-direction-row-on-lg\">\n      <Flex className=\" pf-v5-u-flex-nowrap pf-v5-u-flex-direction-row-reverse pf-v5-u-flex-direction-row-on-lg\">\n        <ToolbarItem spacer={{ default: 'spacerNone' }}>\n          <ClipboardCopy isCode hoverTip=\"Copy current configuration string\" position=\"left\" clickTip=\"Configuration string copied to clipboard\">\n            {JSON.stringify(layout)}\n          </ClipboardCopy>\n        </ToolbarItem>\n        <ToolbarItem spacer={{ default: 'spacerSm' }}>\n          <Stack>\n            <StackItem>\n              <Dropdown\n                isOpen={isOpen}\n                activeItemId={0}\n                onOpenChange={(isOpen: boolean) => {\n                  setIsOpen(isOpen);\n                  setChecked(isDefaultLayout(layout) ? CONSOLE_DEFAULT : CUSTOM);\n                  setCustomValueValidationError('');\n                }}\n                toggle={(toggleRef: React.Ref<MenuToggleElement>) => (\n                  <MenuToggle ref={toggleRef} onClick={onToggleClick} isExpanded={isOpen}>\n                    Config view: {checked}\n                  </MenuToggle>\n                )}\n              >\n                <DropdownGroup label=\"Dashboard configuration\" labelHeadingLevel=\"h3\">\n                  <DropdownList className=\"pf-v5-u-pb-0\">\n                    <Form>\n                      <FormGroup>\n                        <DropdownItem>\n                          <Radio\n                            name=\"config\"\n                            id={CONSOLE_DEFAULT}\n                            label={CONSOLE_DEFAULT}\n                            value={CONSOLE_DEFAULT}\n                            onClick={(e) => {\n                              onToggleClick();\n                              setCustomValueValidationError('');\n                              setChecked(CONSOLE_DEFAULT);\n                              onDefaultConfigSubmit(e);\n                            }}\n                            checked={checked === CONSOLE_DEFAULT}\n                          ></Radio>\n                        </DropdownItem>\n                        <DropdownItem>\n                          <Radio\n                            name=\"config\"\n                            id={CUSTOM}\n                            label=\"Custom configuration\"\n                            value={CUSTOM}\n                            onClick={() => {\n                              setChecked(CUSTOM);\n                            }}\n                            checked={checked === CUSTOM}\n                          ></Radio>\n                          <TextArea\n                            className=\"pf-v5-u-mt-sm\"\n                            rows={1}\n                            placeholder=\"Paste custom string\"\n                            required\n                            onClick={() => {\n                              setChecked(CUSTOM);\n                            }}\n                            onChange={(_event, value) => {\n                              setCustomValue(value);\n                            }}\n                          ></TextArea>\n                          <FormHelperText>\n                            <HelperText>\n                              <HelperTextItem\n                                variant={customValueValidationError ? 'error' : 'default'}\n                                {...(customValueValidationError && { icon: <ExclamationCircleIcon /> })}\n                              >\n                                {customValueValidationError}\n                              </HelperTextItem>\n                            </HelperText>\n                          </FormHelperText>\n                          <div hidden={checked !== CUSTOM}>\n                            <Button variant=\"plain\" type={ButtonType.submit} onClick={onCustomConfigSubmit}>\n                              <CheckIcon />\n                            </Button>\n                            <Button\n                              variant=\"plain\"\n                              type={ButtonType.reset}\n                              onClick={() => {\n                                setIsOpen(false);\n                                setChecked(isDefaultLayout(layout) ? CONSOLE_DEFAULT : CUSTOM);\n                                setCustomValueValidationError('');\n                              }}\n                            >\n                              <TimesIcon />\n                            </Button>\n                          </div>\n                        </DropdownItem>\n                      </FormGroup>\n                    </Form>\n                  </DropdownList>\n                </DropdownGroup>\n              </Dropdown>\n            </StackItem>\n          </Stack>\n        </ToolbarItem>\n      </Flex>\n      <ToolbarItem className=\"pf-v5-u-pr-sm pf-v5-u-pr-0-on-lg pf-v5-u-pb-xs pf-v5-u-pb-0-on-lg\">\n        <Button\n          onClick={() => {\n            toggleOpen((prev) => !prev);\n            setPrevLayout(layout);\n          }}\n          variant=\"secondary\"\n          icon={<PlusCircleIcon />}\n        >\n          Add widgets\n        </Button>\n      </ToolbarItem>\n    </ToolbarGroup>\n  );\n};\n\nconst Header = () => {\n  const { currentUser } = useCurrentUser();\n  const userName = currentUser?.first_name && currentUser?.last_name ? ` ${currentUser.first_name} ${currentUser.last_name}` : currentUser?.username;\n  return (\n    <PageSection className=\"widg-c-page__main-section--header pf-v5-u-p-lg pf-v5-u-p-r-0-on-sm\" variant={PageSectionVariants.light}>\n      <Flex className=\"widg-l-flex--header\" direction={{ default: 'column', lg: 'row' }}>\n        <FlexItem alignSelf={{ default: 'alignSelfFlexStart' }}>\n          <TextContent>\n            <Text component=\"h1\">Hi{userName ? `, ${userName}` : '!'}</Text>\n            <Text component=\"h2\" className=\"pf-v5-u-mt-0\">\n              Welcome to your Hybrid Cloud Console.\n            </Text>\n          </TextContent>\n        </FlexItem>\n        <FlexItem align={{ default: 'alignLeft', lg: 'alignRight' }}>\n          <Toolbar>\n            <ToolbarContent>\n              <Controls />\n            </ToolbarContent>\n          </Toolbar>\n        </FlexItem>\n      </Flex>\n    </PageSection>\n  );\n};\n\nexport default Header;\n","import {\n  Button,\n  Card,\n  CardHeader,\n  CardTitle,\n  Flex,\n  Gallery,\n  GalleryItem,\n  Icon,\n  PageSection,\n  Split,\n  SplitItem,\n  Title,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { useAtom, useAtomValue, useSetAtom } from 'jotai';\nimport React from 'react';\nimport { drawerExpandedAtom } from '../../state/drawerExpandedAtom';\nimport { CloseIcon, GripVerticalIcon } from '@patternfly/react-icons';\nimport { currentDropInItemAtom } from '../../state/currentDropInItemAtom';\nimport { widgetMappingAtom } from '../../state/widgetMappingAtom';\nimport { getWidget } from '../Widgets/widgetDefaults';\nimport HeaderIcon from '../Icons/HeaderIcon';\nimport { WidgetConfiguration } from '../../api/dashboard-templates';\n\nexport type AddWidgetDrawerProps = React.PropsWithChildren<{\n  dismissible?: boolean;\n}>;\n\nconst WidgetWrapper = ({ widgetType, config }: React.PropsWithChildren<{ widgetType: string; config?: WidgetConfiguration }>) => {\n  const setDropInItem = useSetAtom(currentDropInItemAtom);\n  const headerActions = (\n    <Tooltip content={<p>Move widget</p>}>\n      <Icon className=\"pf-v5-u-pt-md\">\n        <GripVerticalIcon style={{ fill: '#6a6e73' }} />\n      </Icon>\n    </Tooltip>\n  );\n  return (\n    <Card\n      onDragStart={(e) => {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        const nodeRect = e.target.getBoundingClientRect();\n        e.dataTransfer.setDragImage(\n          e.target as HTMLDivElement,\n          // mess with this to set the drag image and proper mouse position\n          e.clientX - nodeRect.left,\n          e.clientY - nodeRect.top\n        );\n        e.dataTransfer.setData('text', widgetType);\n        setDropInItem(widgetType);\n      }}\n      onDragEnd={() => setDropInItem(undefined)}\n      // eslint-disable-next-line react/no-unknown-property\n      unselectable=\"on\"\n      draggable={true}\n      className=\"grid-tile\"\n    >\n      <CardHeader className=\"pf-v5-u-py-md\" actions={{ actions: headerActions }}>\n        <Flex className=\"pf-v5-u-flex-direction-row pf-v5-u-flex-nowrap\">\n          <Icon status=\"custom\" className=\"pf-v5-u-mr-sm\">\n            <HeaderIcon icon={config?.icon} />\n          </Icon>\n          <CardTitle>{config?.title || widgetType}</CardTitle>\n        </Flex>\n      </CardHeader>\n    </Card>\n  );\n};\n\nconst AddWidgetDrawer = ({ children }: AddWidgetDrawerProps) => {\n  const [isOpen, toggleOpen] = useAtom(drawerExpandedAtom);\n  const widgetMapping = useAtomValue(widgetMappingAtom);\n\n  const panelContent = (\n    <PageSection\n      className=\"pf-v5-u-p-md pf-v5-u-p-lg-on-sm\"\n      style={{\n        backgroundColor: '#E7F1FA',\n      }}\n    >\n      <Split className=\"widg-l-split--add-widget\">\n        <SplitItem isFilled>\n          <Title headingLevel=\"h2\" size=\"md\">\n            Add new and previously removed widgets by clicking the <GripVerticalIcon /> icon, then drag and drop to a new location. Drag the corners\n            of the cards to resize widgets.\n          </Title>\n        </SplitItem>\n        <SplitItem>\n          <Button\n            variant=\"plain\"\n            className=\"pf-v5-u-pt-0 pf-v5-u-pr-0\"\n            onClick={() => {\n              toggleOpen((prev) => !prev);\n            }}\n            icon={<CloseIcon />}\n          />\n        </SplitItem>\n      </Split>\n      <Gallery className=\"widg-l-gallery pf-v5-u-pt-sm\" hasGutter>\n        {Object.entries(widgetMapping).map(([type, { config }], i) => {\n          return (\n            <GalleryItem key={i}>\n              <WidgetWrapper widgetType={type} config={config}>\n                {getWidget(widgetMapping, type)}\n              </WidgetWrapper>\n            </GalleryItem>\n          );\n        })}\n      </Gallery>\n    </PageSection>\n  );\n  return (\n    <>\n      {isOpen ? <div>{panelContent}</div> : null}\n      {children}\n    </>\n  );\n};\n\nexport default AddWidgetDrawer;\n","import { atom } from 'jotai';\n\nexport const lockedLayoutAtom = atom(false);\n","import { PageSection } from '@patternfly/react-core';\nimport AddWidgetDrawer from '../../Components/WidgetDrawer/WidgetDrawer';\nimport GridLayout from '../../Components/DnDLayout/GridLayout';\nimport { useAtomValue, useSetAtom } from 'jotai';\nimport { lockedLayoutAtom } from '../../state/lockedLayoutAtom';\nimport Header from '../../Components/Header/Header';\nimport React, { useEffect } from 'react';\nimport useCurrentUser from '../../hooks/useCurrentUser';\nimport { getWidgetMapping } from '../../api/dashboard-templates';\nimport { widgetMappingAtom } from '../../state/widgetMappingAtom';\n\nconst DefaultRoute = () => {\n  const isLayoutLocked = useAtomValue(lockedLayoutAtom);\n  const setWidgetMapping = useSetAtom(widgetMappingAtom);\n  const { currentToken } = useCurrentUser();\n\n  useEffect(() => {\n    if (!currentToken) {\n      return;\n    }\n    const getWidgetMap = async () => {\n      const mapping = await getWidgetMapping(currentToken);\n      if (mapping) {\n        setWidgetMapping(mapping);\n      }\n    };\n    getWidgetMap();\n  }, [currentToken]);\n\n  return (\n    <>\n      <Header />\n      <AddWidgetDrawer dismissible={false}>\n        <PageSection className=\"pf-v5-u-p-md pf-v5-u-p-lg-on-sm\">\n          <GridLayout isLayoutLocked={isLayoutLocked} />\n        </PageSection>\n      </AddWidgetDrawer>\n    </>\n  );\n};\n\nexport default DefaultRoute;\n","import { atom } from 'jotai';\n\nexport const drawerExpandedAtom = atom<boolean>(false);\n"],"names":["Controls","isOpen","setIsOpen","customValue","setCustomValue","customValueValidationError","setCustomValueValidationError","toggleOpen","useSetAtom","setPrevLayout","useAtom","layout","setLayout","CONSOLE_DEFAULT","CUSTOM","checked","setChecked","onToggleClick","ToolbarGroup","className","Flex","ToolbarItem","spacer","default","ClipboardCopy","isCode","hoverTip","position","clickTip","JSON","stringify","Stack","StackItem","Dropdown","activeItemId","onOpenChange","toggle","toggleRef","MenuToggle","ref","onClick","isExpanded","DropdownGroup","label","labelHeadingLevel","DropdownList","Form","FormGroup","DropdownItem","Radio","name","id","value","e","preventDefault","onDefaultConfigSubmit","TextArea","rows","placeholder","required","onChange","_event","FormHelperText","HelperText","HelperTextItem","variant","icon","hidden","Button","type","ButtonType","submit","parse","console","error","reset","prev","currentUser","userName","first_name","last_name","username","PageSection","PageSectionVariants","light","direction","lg","FlexItem","alignSelf","TextContent","Text","component","align","Toolbar","ToolbarContent","WidgetWrapper","widgetType","config","setDropInItem","headerActions","Tooltip","content","Icon","style","fill","Card","onDragStart","nodeRect","target","getBoundingClientRect","dataTransfer","setDragImage","clientX","left","clientY","top","setData","onDragEnd","undefined","unselectable","draggable","CardHeader","actions","status","CardTitle","title","children","widgetMapping","useAtomValue","panelContent","backgroundColor","Split","SplitItem","isFilled","Title","headingLevel","size","Gallery","hasGutter","Object","entries","map","i","GalleryItem","key","lockedLayoutAtom","atom","isLayoutLocked","setWidgetMapping","widgetMappingAtom","currentToken","useCurrentUser","useEffect","mapping","Header","dismissible","GridLayout","drawerExpandedAtom"],"sourceRoot":""}